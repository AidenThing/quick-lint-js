// Code generated by tools/generate-lex-tables.cpp. DO NOT EDIT.

// Copyright (C) 2020  Matthew "strager" Glazar
// See end of file for extended copyright information.

#ifndef QUICK_LINT_JS_FE_LEX_TABLES_GENERATED_H
#define QUICK_LINT_JS_FE_LEX_TABLES_GENERATED_H

#include <cstdint>
#include <quick-lint-js/fe/token.h>

namespace quick_lint_js {
struct lex_tables {
  // See NOTE[lex-table-class].
  static constexpr std::uint8_t character_class_table[256] = {
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  //
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  //
      0, 1, 0, 0, 0, 2, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0,  //
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 0,  //
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  //
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0,  //
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  //
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0,  //
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  //
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  //
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  //
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  //
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  //
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  //
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  //
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  //
  };
  static constexpr int character_class_count = 9;

  enum state {
    initial,
    bang,
    percent,
    ampersand,
    plus,
    equal,
    greater,
    circumflex,
    pipe,
    bang_equal,
    ampersand_ampersand,
    equal_equal,
    greater_greater,
    pipe_pipe,
    greater_greater_greater,

    // Complete/terminal states:
    done_percent_equal,
    done_ampersand_equal,
    done_plus_plus,
    done_plus_equal,
    done_equal_greater,
    done_greater_equal,
    done_circumflex_equal,
    done_pipe_equal,
    done_bang_equal_equal,
    done_ampersand_ampersand_equal,
    done_equal_equal_equal,
    done_greater_greater_equal,
    done_pipe_pipe_equal,
    done_greater_greater_greater_equal,

    // An unexpected character was detected. The lexer should retract the most
    // recent byte.
    retract,

    // Indicates a bug in the table. The state machine should never enter this
    // state.
    table_broken,
  };
  static constexpr int input_state_count = 15;

  // Returns true if there are no transitions from this state to any other
  // state.
  static bool is_terminal_state(state s) { return s >= done_percent_equal; }

  static constexpr state
      transition_table[character_class_count][input_state_count] = {
          // (other)
          {
              table_broken,  // (initial)(other) (invalid)
              retract,       // !(other)         (invalid)
              retract,       // %(other)         (invalid)
              retract,       // &(other)         (invalid)
              retract,       // +(other)         (invalid)
              retract,       // =(other)         (invalid)
              retract,       // >(other)         (invalid)
              retract,       // ^(other)         (invalid)
              retract,       // |(other)         (invalid)
              retract,       // !=(other)        (invalid)
              retract,       // &&(other)        (invalid)
              retract,       // ==(other)        (invalid)
              retract,       // >>(other)        (invalid)
              retract,       // ||(other)        (invalid)
              retract,       // >>>(other)       (invalid)
          },
          // !
          {
              bang,     // (initial)!
              retract,  // !!               (invalid)
              retract,  // %!               (invalid)
              retract,  // &!               (invalid)
              retract,  // +!               (invalid)
              retract,  // =!               (invalid)
              retract,  // >!               (invalid)
              retract,  // ^!               (invalid)
              retract,  // |!               (invalid)
              retract,  // !=!              (invalid)
              retract,  // &&!              (invalid)
              retract,  // ==!              (invalid)
              retract,  // >>!              (invalid)
              retract,  // ||!              (invalid)
              retract,  // >>>!             (invalid)
          },
          // %
          {
              percent,  // (initial)%
              retract,  // !%               (invalid)
              retract,  // %%               (invalid)
              retract,  // &%               (invalid)
              retract,  // +%               (invalid)
              retract,  // =%               (invalid)
              retract,  // >%               (invalid)
              retract,  // ^%               (invalid)
              retract,  // |%               (invalid)
              retract,  // !=%              (invalid)
              retract,  // &&%              (invalid)
              retract,  // ==%              (invalid)
              retract,  // >>%              (invalid)
              retract,  // ||%              (invalid)
              retract,  // >>>%             (invalid)
          },
          // &
          {
              ampersand,            // (initial)&
              retract,              // !&               (invalid)
              retract,              // %&               (invalid)
              ampersand_ampersand,  // & -> &&
              retract,              // +&               (invalid)
              retract,              // =&               (invalid)
              retract,              // >&               (invalid)
              retract,              // ^&               (invalid)
              retract,              // |&               (invalid)
              retract,              // !=&              (invalid)
              retract,              // &&&              (invalid)
              retract,              // ==&              (invalid)
              retract,              // >>&              (invalid)
              retract,              // ||&              (invalid)
              retract,              // >>>&             (invalid)
          },
          // +
          {
              plus,            // (initial)+
              retract,         // !+               (invalid)
              retract,         // %+               (invalid)
              retract,         // &+               (invalid)
              done_plus_plus,  // + -> ++
              retract,         // =+               (invalid)
              retract,         // >+               (invalid)
              retract,         // ^+               (invalid)
              retract,         // |+               (invalid)
              retract,         // !=+              (invalid)
              retract,         // &&+              (invalid)
              retract,         // ==+              (invalid)
              retract,         // >>+              (invalid)
              retract,         // ||+              (invalid)
              retract,         // >>>+             (invalid)
          },
          // =
          {
              equal,                               // (initial)=
              bang_equal,                          // ! -> !=
              done_percent_equal,                  // % -> %=
              done_ampersand_equal,                // & -> &=
              done_plus_equal,                     // + -> +=
              equal_equal,                         // = -> ==
              done_greater_equal,                  // > -> >=
              done_circumflex_equal,               // ^ -> ^=
              done_pipe_equal,                     // | -> |=
              done_bang_equal_equal,               // != -> !==
              done_ampersand_ampersand_equal,      // && -> &&=
              done_equal_equal_equal,              // == -> ===
              done_greater_greater_equal,          // >> -> >>=
              done_pipe_pipe_equal,                // || -> ||=
              done_greater_greater_greater_equal,  // >>> -> >>>=
          },
          // >
          {
              greater,                  // (initial)>
              retract,                  // !>               (invalid)
              retract,                  // %>               (invalid)
              retract,                  // &>               (invalid)
              retract,                  // +>               (invalid)
              done_equal_greater,       // = -> =>
              greater_greater,          // > -> >>
              retract,                  // ^>               (invalid)
              retract,                  // |>               (invalid)
              retract,                  // !=>              (invalid)
              retract,                  // &&>              (invalid)
              retract,                  // ==>              (invalid)
              greater_greater_greater,  // >> -> >>>
              retract,                  // ||>              (invalid)
              retract,                  // >>>>             (invalid)
          },
          // ^
          {
              circumflex,  // (initial)^
              retract,     // !^               (invalid)
              retract,     // %^               (invalid)
              retract,     // &^               (invalid)
              retract,     // +^               (invalid)
              retract,     // =^               (invalid)
              retract,     // >^               (invalid)
              retract,     // ^^               (invalid)
              retract,     // |^               (invalid)
              retract,     // !=^              (invalid)
              retract,     // &&^              (invalid)
              retract,     // ==^              (invalid)
              retract,     // >>^              (invalid)
              retract,     // ||^              (invalid)
              retract,     // >>>^             (invalid)
          },
          // |
          {
              pipe,       // (initial)|
              retract,    // !|               (invalid)
              retract,    // %|               (invalid)
              retract,    // &|               (invalid)
              retract,    // +|               (invalid)
              retract,    // =|               (invalid)
              retract,    // >|               (invalid)
              retract,    // ^|               (invalid)
              pipe_pipe,  // | -> ||
              retract,    // !=|              (invalid)
              retract,    // &&|              (invalid)
              retract,    // ==|              (invalid)
              retract,    // >>|              (invalid)
              retract,    // |||              (invalid)
              retract,    // >>>|             (invalid)
          },
  };

  static constexpr token_type invalid_token_type = token_type::identifier;
  // See NOTE[lex-table-token-type].
  static constexpr token_type state_to_token[] = {
      invalid_token_type,                         // (initial)
      token_type::bang,                           // !
      token_type::percent,                        // %
      token_type::ampersand,                      // &
      token_type::plus,                           // +
      token_type::equal,                          // =
      token_type::greater,                        // >
      token_type::circumflex,                     // ^
      token_type::pipe,                           // |
      token_type::bang_equal,                     // !=
      token_type::ampersand_ampersand,            // &&
      token_type::equal_equal,                    // ==
      token_type::greater_greater,                // >>
      token_type::pipe_pipe,                      // ||
      token_type::greater_greater_greater,        // >>>
      token_type::percent_equal,                  // %=
      token_type::ampersand_equal,                // &=
      token_type::plus_plus,                      // ++
      token_type::plus_equal,                     // +=
      token_type::equal_greater,                  // =>
      token_type::greater_equal,                  // >=
      token_type::circumflex_equal,               // ^=
      token_type::pipe_equal,                     // |=
      token_type::bang_equal_equal,               // !==
      token_type::ampersand_ampersand_equal,      // &&=
      token_type::equal_equal_equal,              // ===
      token_type::greater_greater_equal,          // >>=
      token_type::pipe_pipe_equal,                // ||=
      token_type::greater_greater_greater_equal,  // >>>=
  };
};
}

#endif

// quick-lint-js finds bugs in JavaScript programs.
// Copyright (C) 2020  Matthew "strager" Glazar
//
// This file is part of quick-lint-js.
//
// quick-lint-js is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// quick-lint-js is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with quick-lint-js.  If not, see <https://www.gnu.org/licenses/>.
